// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pricing.Infrastructure.Persistence;

#nullable disable

namespace Pricing.Infrastructure.Migrations
{
    [DbContext(typeof(PricingDbContext))]
    partial class PricingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pricing.Domain.Entities.PriceListEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("IX_PriceListEntries_SupplierId");

                    b.ToTable("PriceListEntries", (string)null);
                });

            modelBuilder.Entity("Pricing.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HazardClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("HazardClass")
                        .HasDatabaseName("IX_Products_HazardClass");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("UnitOfMeasure")
                        .HasDatabaseName("IX_Products_UnitOfMeasure");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Pricing.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("Country")
                        .HasDatabaseName("IX_Suppliers_Country");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Suppliers_Name");

                    b.HasIndex("Preferred")
                        .HasDatabaseName("IX_Suppliers_Preferred");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Pricing.Domain.Entities.PriceListEntry", b =>
                {
                    b.HasOne("Pricing.Domain.Entities.Supplier", "Supplier")
                        .WithMany("PriceListEntries")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Pricing.Domain.ValueObjects.ProductSku", "Sku", b1 =>
                        {
                            b1.Property<int>("PriceListEntryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Sku");

                            b1.HasKey("PriceListEntryId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_PriceListEntries_Sku");

                            b1.ToTable("PriceListEntries");

                            b1.WithOwner()
                                .HasForeignKey("PriceListEntryId");
                        });

                    b.OwnsOne("Pricing.Domain.ValueObjects.DateRange", "ValidityPeriod", b1 =>
                        {
                            b1.Property<int>("PriceListEntryId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("From")
                                .HasColumnType("date")
                                .HasColumnName("ValidFrom");

                            b1.Property<DateOnly?>("To")
                                .HasColumnType("date")
                                .HasColumnName("ValidTo");

                            b1.HasKey("PriceListEntryId");

                            b1.HasIndex("From")
                                .HasDatabaseName("IX_PriceListEntries_ValidFrom");

                            b1.HasIndex("To")
                                .HasDatabaseName("IX_PriceListEntries_ValidTo");

                            b1.ToTable("PriceListEntries");

                            b1.WithOwner()
                                .HasForeignKey("PriceListEntryId");
                        });

                    b.OwnsOne("Pricing.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("PriceListEntryId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("PriceAmount");

                            b1.HasKey("PriceListEntryId");

                            b1.ToTable("PriceListEntries");

                            b1.WithOwner()
                                .HasForeignKey("PriceListEntryId");

                            b1.OwnsOne("Pricing.Domain.ValueObjects.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyPriceListEntryId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("nvarchar(3)")
                                        .HasColumnName("Currency");

                                    b2.HasKey("MoneyPriceListEntryId");

                                    b2.HasIndex("Code")
                                        .HasDatabaseName("IX_PriceListEntries_Currency");

                                    b2.ToTable("PriceListEntries");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyPriceListEntryId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("Pricing.Domain.ValueObjects.Quantity", "MinimumQuantity", b1 =>
                        {
                            b1.Property<int>("PriceListEntryId")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("MinimumQuantity");

                            b1.HasKey("PriceListEntryId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_PriceListEntries_MinQuantity");

                            b1.ToTable("PriceListEntries");

                            b1.WithOwner()
                                .HasForeignKey("PriceListEntryId");
                        });

                    b.Navigation("MinimumQuantity")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Sku")
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("ValidityPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("Pricing.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("Pricing.Domain.ValueObjects.ProductSku", "Sku", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Sku");

                            b1.HasKey("ProductId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Products_Sku");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Sku")
                        .IsRequired();
                });

            modelBuilder.Entity("Pricing.Domain.Entities.Supplier", b =>
                {
                    b.OwnsOne("Pricing.Domain.ValueObjects.LeadTime", "LeadTime", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("int");

                            b1.Property<int>("Days")
                                .HasColumnType("int")
                                .HasColumnName("LeadTimeDays");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("LeadTime")
                        .IsRequired();
                });

            modelBuilder.Entity("Pricing.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("PriceListEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
